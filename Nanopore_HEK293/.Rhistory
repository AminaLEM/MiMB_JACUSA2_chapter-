install.packages(pROC
)
install.packages("pROC")
exit()
q()
library(pROC)
data(aSAH)
# Full AUC
roc1 <- roc(aSAH$outcome, aSAH$s100b)
roc1 <- roc(aSAH$outcome, aSAH)
roc1 <- roc(aSAH$outcome, aSAH[s100b])
roc1 <- roc(aSAH$outcome, aSAH['s100b'])
roc1 <- roc(aSAH['outcome'], aSAH['s100b'])
roc1 <- roc_(aSAH['outcome'], aSAH['s100b'])
roc1 <- roc(aSAH,'outcome', 's100b')
roc1 <- roc(aSAH$outcome, aSAH$s100b)
dude = 's100b'
roc1 <- roc(aSAH,'outcome', dude)
dude2 = "outcome"
roc1 <- roc(aSAH,dude2, dude)
roc1 <- roc_(aSAH,dude2, dude)
roc1 <- roc_(aSAH,'outcome', dude)
roc1 <- roc_(aSAH,'outcome', dude)
roc1 <- auc_(aSAH,'outcome', dude)
roc1 <- auc(aSAH,'outcome', dude)
roc1 <- auc(aSAH$outcome, aSAH$s100b)
roc1 <- auc(aSAH$outcome, aSAH[dude])
roc1 <- auc(aSAH["outcome"], aSAH[dude])
aSAH["outcome"]
roc1 <- auc(aSAH["outcome"], aSAH[dude])
roc1 <- auc(aSAH[,"outcome"], aSAH[dude])
roc1 <- auc(aSAH[,"outcome"], aSAH[,dude])
roc1 <- roc(aSAH[,"outcome"], aSAH[,dude])
roc1 <- roc(aSAH[,"outcome"], aSAH[,dude])
q()
install.packages("plotly")
q()
library(dplyr)
library(ggplot2)
library(plotly)
library(pROC)
set.seed(0)
X <- matrix(rnorm(10000),nrow=500)
y <- sample(0:1, 500, replace=TRUE)
db <- data.frame(X,y)
db$y <- as.factor(db$y)
test_data = db[1:20]
model<- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification") %>%
  # Fit the model
  fit(y ~., data = db)
ypred <- predict(model,
                 new_data = test_data,
                 type = "prob")
yscore <- data.frame(ypred$.pred_0)
rdb <- cbind(db$y,yscore)
colnames(rdb) = c('y','yscore')
pdb <- pr_curve(rdb, y, yscore)
auc = roc_auc(rdb, y, yscore)
auc = auc$.estimate
tit = paste('ROC Curve (AUC = ',toString(round(auc,2)),')',sep = '')
fig <-  plot_ly(data = pdb ,x =  ~recall, y = ~precision, type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
  add_segments(x = 0, xend = 1, y = 1, yend = 0, line = list(dash = "dash", color = 'black'),inherit = FALSE, showlegend = FALSE) %>%
  layout(title = tit, xaxis = list(title = "Recall"), yaxis = list(title = "Precision") )
pr_curve
pr_curve()
library(dplyr)
library(ggplot2)
library(plotly)
library(pROC)
set.seed(0)
X <- matrix(rnorm(10000),nrow=500)
y <- sample(0:1, 500, replace=TRUE)
db <- data.frame(X,y)
db$y <- as.factor(db$y)
test_data = db[1:20]
model<- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification") %>%
  # Fit the model
  fit(y ~., data = db)
ypred <- predict(model,
                  new_data = test_data,
                  type = "prob")
yscore <- data.frame(ypred$.pred_0)
rdb <- cbind(db$y,yscore)
colnames(rdb) = c('y','yscore')
pdb <- roc_curve(rdb, y, yscore)
pdb$specificity <- 1 - pdb$specificity
auc = roc_auc(rdb, y, yscore)
auc = auc$.estimate
tit = paste('ROC Curve (AUC = ',toString(round(auc,2)),')',sep = '')
fig <-  plot_ly(data = pdb ,x =  ~specificity, y = ~sensitivity, type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
  layout(title = tit,xaxis = list(title = "False Positive Rate"), yaxis = list(title = "True Positive Rate")) %>%
add_segments(x = 0, xend = 1, y = 0, yend = 1, line = list(dash = "dash", color = 'black'),inherit = FALSE, showlegend = FALSE)
fig
library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions,ROCR.simple$labels)
perf <- performance(pred,"prec","rec")
## The plot obtained with the standard ROCR functions
## Not run: 
plot(perf)
## End(Not run)
## Now our Precision/Recall curve avoiding the saw-tooth effect
## Not run: 
install.packages(ROCR)
install.packages("ROCR")
install.packages("DMwR")
install.packages("DMwR")
install.packages("MLeval")
install.packages("ranger")
install.packages("MLmetrics")
install.packages("PRROC")
q()
install.packages("plotROC")
q()
install.packages("plotROC")
install.packages("XML")
q()
install.packages("NMF")
install.packages("Biobase")
install.packages("BiocManager")
BiocManager::install("Biobase", version = "3.8")
BiocManager::install("Biobase)
BiocManager::install("Biobase")
install.packages("NMF")
q()
install.packages("ggseqlogo")
q()
install.packages("hrbrthemes")
q()
